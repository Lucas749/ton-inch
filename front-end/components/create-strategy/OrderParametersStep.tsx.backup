"use client";

import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { TokenSelector } from "@/components/TokenSelector";
import { OPERATORS } from "@/hooks/useOrders";

interface StrategyData {
  tokenIn: string;
  tokenOut: string;
  orderAmount: string;
  targetPrice: string;
  slippage: string;
  expiry: string;
  orderCondition: {
    indexId: string;
    operator: number;
    threshold: string;
    description: string;
  };
  [key: string]: any;
}

interface OrderParametersStepProps {
  strategyData: StrategyData;
  updateStrategyData: (field: string, value: any) => void;
  updateOrderCondition: (param: string, value: any) => void;
  indices: any[];
}

const getOperatorName = (operator: number): string => {
  const names = ['>', '<', '>=', '<=', '=='];
  return names[operator] || '?';
};

export const OrderParametersStep = (props: OrderParametersStepProps) => {
  const { strategyData, updateStrategyData, updateOrderCondition, indices } = props;
  return (
    <div className="space-y-6">
      <Card>
        <CardHeader>
          <CardTitle>Token Swap Configuration</CardTitle>
        </CardHeader>
        <CardContent className="space-y-4">
          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
            <div>
              <Label>From Token</Label>
              <TokenSelector
                value={strategyData.tokenIn}
                onChange={(value) => updateStrategyData("tokenIn", value)}
                placeholder="Select input token"
              />
            </div>
            <div>
              <Label>To Token</Label>
              <TokenSelector
                value={strategyData.tokenOut}
                onChange={(value) => updateStrategyData("tokenOut", value)}
                placeholder="Select output token"
              />
            </div>
          </div>
          
          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
            <div>
              <Label htmlFor="order-amount">Order Amount</Label>
              <Input
                id="order-amount"
                placeholder="0.0"
                value={strategyData.orderAmount}
                onChange={(e) => updateStrategyData("orderAmount", e.target.value)}
              />
            </div>
            <div>
              <Label htmlFor="target-price">Target Price</Label>
              <Input
                id="target-price"
                placeholder="0.0"
                value={strategyData.targetPrice}
                onChange={(e) => updateStrategyData("targetPrice", e.target.value)}
              />
            </div>
          </div>
        </CardContent>
      </Card>

      <Card>
        <CardHeader>
          <CardTitle>Index Condition</CardTitle>
        </CardHeader>
        <CardContent className="space-y-4">
          <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
            <div>
              <Label>Index</Label>
              <Select 
                value={strategyData.orderCondition.indexId} 
                onValueChange={(value) => updateOrderCondition("indexId", value)}
              >
                <SelectTrigger>
                  <SelectValue placeholder="Select index" />
                </SelectTrigger>
                <SelectContent>
                  {indices.map((index) => (
                    <SelectItem key={index.id} value={index.id.toString()}>
                      {index.name}
                    </SelectItem>
                  ))}
                </SelectContent>
              </Select>
            </div>
            
            <div>
              <Label>Condition</Label>
              <Select 
                value={strategyData.orderCondition.operator.toString()} 
                onValueChange={(value) => updateOrderCondition("operator", parseInt(value))}
              >
                <SelectTrigger>
                  <SelectValue placeholder="Select condition" />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value={OPERATORS.GT.toString()}>Greater than (>)</SelectItem>
                  <SelectItem value={OPERATORS.LT.toString()}>Less than (<)</SelectItem>
                  <SelectItem value={OPERATORS.GTE.toString()}>Greater than or equal (>=)</SelectItem>
                  <SelectItem value={OPERATORS.LTE.toString()}>Less than or equal (<=)</SelectItem>
                  <SelectItem value={OPERATORS.EQ.toString()}>Equal to (==)</SelectItem>
                </SelectContent>
              </Select>
            </div>
            
            <div>
              <Label htmlFor="threshold">Threshold</Label>
              <Input
                id="threshold"
                placeholder="0"
                value={strategyData.orderCondition.threshold}
                onChange={(e) => updateOrderCondition("threshold", e.target.value)}
              />
            </div>
          </div>
        </CardContent>
      </Card>
    </div>
  );
}